1.	difference between Browser JS(console) v Nodejs

Nodejs:
•	Node doesn’t have a predefined “window” object cause it doesn’t have a window to draw anything.
•	“location” object is related to a particular url; that means it is for page specific. So, node doesn’t require that.
•	Ofcourse Node doesn’t have “document” object also, cause it never have to render anything in a page.
•	Node has “global”, which is a predefined global object. It contains several functions that are not available in browsers, cause they are needed for server side works only.
•	“require” object is predefined in Node which is used to include modules in the app.
In Node everything is a module. You must keep your code inside a module.

JS(console):
•	“window” is a predefined global object which has functions and attributes, that have to deal with window that has been drawn.
•	“location” is another predefined object in browsers, that has all the information about the url we have loaded.
•	“document”, which is also another predefined global variable in browsers, has the html which is rendered.
•	Browsers may have an object named “global”, but it will be the exact one as “window”.
•	Browsers don’t have “require” predefined. You may include it in your app for asynchronous file loading.
•	Moduling is not mandatory in client side JavaScript, i.e. in browsers.
As both of them are JavaScript executor, and Node uses the JavaScript engine of a browser (Chrome), so differences are not much there. It is just the Node wrapper which has been written on top of JavaScript V8 Runtime engine, which is deleting few objects and also including some according to the requirement of Node.

2 Watch and Summary

Parsing HTML

Parsing means analyzing and converting a program into an internal format that a runtime environment can actually run, for example the JavaScript engine inside browsers. The browser parses HTML into a DOM tree. ... HTML tokens include start and end tags, as well as attribute names and values.
 
Parse tree

Html
| -- head
` -- body
    | --p.wat
    |       `-- #text
    `--div
            `--span
                  --#text

CSS 
•	The DOM and CSSOM trees are combined to form the render tree.
•	Render tree contains only the nodes required to render the page.
•	Layout computes the exact position and size of each object.
•	The last step is paint, which takes in the final render tree and renders the pixels to the screen.

Layout
The layout (also called reflow) peace will be in charge to calculate the positions and dimensions of each node on the screen. For instance, if you rotate your phone, or if you resize your browser, the layout peace will be executed.

Paint
that we know which nodes are visible, and their computed styles and geometry, we can pass this information to the final stage, which converts each node in the render tree to actual pixels on the screen. This step is often referred to as “painting”, “rasterizing.” or “repainting”.

4 Execute the below code and write your description in txt file


1.console.log(typeof(1)) // number
    it will take as integer value

2.console.log(typeof(1.1)) // number
    it will take as integer value.if we use parseFloat it will take as floating point value

3.console.log(typeof('1.1'))//string
    inside the “ ” or ‘ ‘ it take it as string value

4.console.log(typeof(true))//‘Boolean’
    the result is ‘Boolean’.it has true and false


5.console.log(typeof(null))//object
    typeof null is an ‘object’ which gives a wrong impression that,
    null is an object where it is a primitive value.


6.console.log(typeof(undefined))//undefined
    a type check on an undeclared variable used to result in 'undefined'.
    But this is not an error-safe way to deal with it
 
7.console.log(typeof([]))//object
    the result is ‘object’.it will take empty square bracket as object

8.console.log(typeof({}))//object
    the result is ‘object’.it will take empty bracket as object

9.console.log(typeof(NaN))//NaN
    The typeof NaN is 'number'.